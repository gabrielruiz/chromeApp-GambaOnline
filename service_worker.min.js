async function ensureOffscreenDocument(){const e=await chrome.runtime.getContexts({contextTypes:["OFFSCREEN_DOCUMENT"],documentUrls:[chrome.runtime.getURL(OFFSCREEN_DOCUMENT_PATH)]});e.length>0||(creatingOffscreenDocument?await creatingOffscreenDocument:(creatingOffscreenDocument=chrome.offscreen.createDocument({url:OFFSCREEN_DOCUMENT_PATH,reasons:["AUDIO_PLAYBACK"],justification:"Required for playing Gamba FM audio stream using jPlayer."}),await creatingOffscreenDocument,creatingOffscreenDocument=null))}async function updateIcon(e){const t=e?{19:"icons/iconPlay.png",38:"icons/iconPlay.png"}:{19:"icons/iconPause.png",38:"icons/iconPause.png"};try{await chrome.action.setIcon({path:t}),console.log("Icon updated, isPlaying:",e)}catch(e){console.error("Error setting icon:",e)}}async function playAudio(e){await ensureOffscreenDocument(),chrome.runtime.sendMessage({target:"offscreen",type:"play",data:{url:e}}),updateIcon(!0),isPlayingNow=!0}async function pauseAudio(){await ensureOffscreenDocument(),chrome.runtime.sendMessage({target:"offscreen",type:"pause"}),updateIcon(!1),isPlayingNow=!1}async function setVolume(e){await ensureOffscreenDocument(),chrome.runtime.sendMessage({target:"offscreen",type:"setVolume",data:{volume:e}})}const OFFSCREEN_DOCUMENT_PATH="/offscreen_player.html";let creatingOffscreenDocument,isPlayingNow=!1;chrome.action.onClicked.addListener(async e=>{if(console.log("Action clicked. Attempting to fetch stream data and play."),isPlayingNow)await pauseAudio().then(()=>{console.log({status:"Pause initiated"})}).catch(e=>{console.error("Error initiating pause from message:",e),console.log({status:"Error initiating pause",error:e.message})});else{const e="https://raw.githubusercontent.com/gabrielruiz/chromeApp-GambaOnline/master/data.json";try{const t=await fetch(e);if(!t.ok)throw new Error(`HTTP error fetching data.json! status: ${t.status}`);const a=await t.json();a&&a.streamUrl?(console.log("Attempting to play streamUrl."),await playAudio(a.streamUrl)):a&&a.streamUrl2?(console.warn("streamUrl not found in data.json, attempting to play streamUrl2."),await playAudio(a.streamUrl2)):console.error("No valid stream URL (streamUrl or streamUrl2) found in fetched data.json:",a)}catch(e){console.error("Error fetching or processing data.json:",e)}}}),chrome.runtime.onMessage.addListener((e,t,a)=>{if("service-worker"===e.target){switch(e.type){case"playerReady":console.log("Player ready!"),a({status:"Player Ready Msg received"});break;case"play":playAudio(e.data.url).then(()=>{a({status:"Playing initiated"})}).catch(e=>{console.error("Error initiating play from message:",e),a({status:"Error initiating play",error:e.message})});break;case"pause":pauseAudio().then(()=>{a({status:"Pause initiated"})}).catch(e=>{console.error("Error initiating pause from message:",e),a({status:"Error initiating pause",error:e.message})});break;case"settingsUpdated":setVolume(e.data.volume),a({status:"Settings update processed"});break;case"playerStatusUpdate":console.log("Received player status update from offscreen:",e.data),"boolean"==typeof e.data.isPlaying&&updateIcon(e.data.isPlaying),a({status:"Player status acknowledged"});break;default:console.warn("Received unknown message type for service-worker:",e.type),a({status:"Unknown message type",type:e.type})}return!0}}),chrome.runtime.onStartup.addListener(()=>{console.log("Extension started up.")}),console.log("Gamba FM Service Worker started.");